#+TITLE:Scripts
#+PROPERTY: header-args :mkdirp yes
#+AUTHOR: DemonKingSwarn

* Polybar Launch
#+begin_src bash :tangle ~/.config/polybar/launch.sh
#!/usr/bin/env bash

killall -q polybar

echo "---" | tee -a /tmp/polybar.log
polybar main >>/tmp/polybar.log 2>&1 &

echo "Bars launched..."

#+end_src

* Startup Script
#+begin_src sh :tangle ~/.scripts/system/startup.sh
#!/usr/bin/env sh

# This is the startup script.

# cursor settings
xsetroot -cursor_name left_ptr 
#xset r rate 300 50

# keyboard settings
## Turns Caps Lock into Control, useful for Emacs
setxkbmap -option ctrl:nocaps
sxhkd &

# system
flameshot &
xss-lock -l $HOME/.scripts/system/lock.sh &

# rice
picom --experimental-backends -b &
dunst &
$HOME/.scripts/setbg/set_wallpaper &
$HOME/.config/polybar/launch.sh &
bspswallow &

# Updates dotfiles
# $HOME/.scripts/misc/autocommitpressure &

# D-EMACS
emacs --daemon &

while true;
do
	sleep 1
done

#+end_src

* Lock Script
#+begin_src bash :tangle ~/.scripts/system/lock.sh
#!/bin/bash
ICON=$HOME/.config/i3/lock.png
IMAGEDIR=/tmp/uwu.png
scrot $IMAGEDIR
convert $IMAGEDIR -scale 10% -scale 1000% $IMAGEDIR
convert $IMAGEDIR $ICON -gravity center -composite -matte $IMAGEDIR
i3lock -u -i $IMAGEDIR
rm -rf /tmp/uwu.png

#+end_src

* Set Wallpaper
#+begin_src sh :tangle ~/.scripts/setbg/set_wallpaper
#!/bin/sh

walp=$(ls -d ~/pix/wall/* | shuf -n 1)
feh --bg-fill "$walp"
wal -i "$walp"
pywalfox install

#+end_src

* Bspswallow
#+begin_src sh :tangle ~/.local/bin/bspswallow
#!/bin/sh

# Get class of a wid
get_class() {
	id=$1
  if [ -z "$id" ]; then
    echo ""
  else
    xprop -id "$id" | sed -n \
      -e '/WM_CLASS/s/\( "\)/\n/g; s/[^\n]*\n\([^"]*\)[^\n]*/\1\n/g' \
      -e '/WM_COMMAND/s/[^"]*/\n\n/1; s/\n"//1; s/\n\([^"]*\)".*/\n\1/; /\n/p' | sed '/^$/d' | head -n1
  fi
}

get_pid() {
	xprop _NET_WM_PID -id "$1" | awk '/[0-9]+/ {print $3}'
}

get_ppid() {
	ps -o ppid= -p $1
}

check_swallowing_process() {
	pid=$(get_pid $1)
	[ -z $pid ] && return 0
	gppid=$(get_ppid $(get_ppid $pid))
	grep -i "^$(ps -o cmd= -p $gppid | awk '{print $1}' | sed 's_^.*/__')$" ~/.config/bspwm/terminals && return 0
	[ "$(get_ppid "$(get_ppid "$(get_pid "$1")")")" = "$(get_pid "$2")" ] && return 0 || return 1
}

swallow() {
	addedtodesktop=$2
	lasttermdesktop=$(bspc query -D -n last)

	swallowerid=$1
	swallowingid=$(bspc query -N -n last)
	if [ "$addedtodesktop" = "$lasttermdesktop" ] && check_swallowing_process "$swallowerid" "$swallowingid"; then
		grep -q "^$(get_class "$swallowerid")$" ~/.config/bspwm/{noswallow, terminals} && return
		grep -i "^$(get_class "$swallowingid")$" ~/.config/bspwm/terminals || return
		echo "$swallowerid $swallowingid" >> /tmp/swallowids
		bspc node "$swallowingid" --flag hidden=on
	fi
}

spit() {
	spitterid=$1
	spitterdesktop=$2
	grep "^$spitterid" /tmp/swallowids || return
	spittingid=$(grep "^$spitterid" /tmp/swallowids | head -n1 | awk '{print $2}')

	bspc node "$spittingid" --flag hidden=off

	termdesktop=$(bspc query -D -n "$spittingid")
	[ "$termdesktop" = "$spitterdesktop" ] || bspc node "$spittingid" -d "$spitterdesktop"

	bspc node "$spittingid" -f
	sed -i "/^$spitterid/d" /tmp/swallowids
}

bspc subscribe node_add node_remove | while read -r event
do
	case $(echo "$event" | awk '{ print $1 }') in
		node_add)
            		swallow $(echo "$event" | awk '{print $5 " " $3}')
			;;
		node_remove)
			spit $(echo "$event" | awk '{print $4 " " $3}')
			;;
	esac
done

#+end_src

* Nettraf
#+begin_src sh :tangle ~/.local/bin/statusbar/nettraf
#!/bin/sh

# Module showing network traffic. Shows how much data has been received (RX) or
# transmitted (TX) since the previous time this script ran. So if run every
# second, gives network traffic per second.

case $BLOCK_BUTTON in
	1) setsid -f "$TERMINAL" -e bmon ;;
	3) notify-send "🌐 Network traffic module" "🔻: Traffic received
🔺: Traffic transmitted" ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

update() {
    sum=0
    for arg; do
        read -r i < "$arg"
        sum=$(( sum + i ))
    done
    cache=${XDG_CACHE_HOME:-$HOME/.cache}/${1##*/}
    [ -f "$cache" ] && read -r old < "$cache" || old=0
    printf %d\\n "$sum" > "$cache"
    printf %d\\n $(( sum - old ))
}

rx=$(update /sys/class/net/[ew]*/statistics/rx_bytes)
tx=$(update /sys/class/net/[ew]*/statistics/tx_bytes)

printf "🔻%4sB 🔺%4sB\\n" $(numfmt --to=iec $rx) $(numfmt --to=iec $tx)

#+end_src

* Volume
#+begin_src sh :tangle ~/.local/bin/statusbar/volume
#!/bin/sh

# Prints the current volume or 🔇 if muted.

case $BLOCK_BUTTON in
	1) setsid -f "$TERMINAL" -e pulsemixer ;;
	2) pamixer -t ;;
	4) pamixer --allow-boost -i 1 ;;
	5) pamixer --allow-boost -d 1 ;;
	3) notify-send "📢 Volume module" "\- Shows volume 🔊, 🔇 if muted.
- Middle click to mute.
- Scroll to change." ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

[ $(pamixer --get-mute) = true ] && echo 🔇 && exit

vol="$(pamixer --get-volume)"

if [ "$vol" -gt "70" ]; then
	icon="🔊"
elif [ "$vol" -gt "30" ]; then
	icon="🔉"
elif [ "$vol" -gt "0" ]; then
	icon="🔈"
else
        echo 🔇 && exit
fi

echo "$icon$vol%"

#+end_src

* Clock
#+begin_src sh :tangle ~/.local/bin/statusbar/clock
#!/bin/sh

clock=$(date '+%I')

case "$clock" in
	"00") icon="🕛" ;;
	"01") icon="🕐" ;;
	"02") icon="🕑" ;;
	"03") icon="🕒" ;;
	"04") icon="🕓" ;;
	"05") icon="🕔" ;;
	"06") icon="🕕" ;;
	"07") icon="🕖" ;;
	"08") icon="🕗" ;;
	"09") icon="🕘" ;;
	"10") icon="🕙" ;;
	"11") icon="🕚" ;;
	"12") icon="🕛" ;;
esac

case $BLOCK_BUTTON in
	1) notify-send "This Month" "$(cal --color=always | sed "s/..7m/<b><span color=\"red\">/;s/..27m/<\/span><\/b>/")" && notify-send "Appointments" "$(calcurse -d3)" ;;
	2) setsid -f "$TERMINAL" -e calcurse ;;
	3) notify-send "📅 Time/date module" "\- Left click to show upcoming appointments for the next three days via \`calcurse -d3\` and show the month via \`cal\`
- Middle click opens calcurse if installed" ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

date "+%Y %b %d (%a) $icon%I:%M%p"

#+end_src

* Internet
#+begin_src sh :tangle ~/.local/bin/statusbar/internet
#!/bin/sh

# Show wifi 📶 and percent strength or 📡 if none.
# Show 🌐 if connected to ethernet or ❎ if none.
# Show 🔒 if a vpn connection is active

case $BLOCK_BUTTON in
	1) "$TERMINAL" -e nmtui; pkill -RTMIN+4 dwmblocks ;;
	3) notify-send "🌐 Internet module" "\- Click to connect
❌: wifi disabled
📡: no wifi connection
📶: wifi connection with quality
❎: no ethernet
🌐: ethernet working
🔒: vpn is active
" ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

if grep -xq 'up' /sys/class/net/w*/operstate 2>/dev/null ; then
	wifiicon="$(awk '/^\s*w/ { print "📶", int($3 * 100 / 70) "% " }' /proc/net/wireless)"
elif grep -xq 'down' /sys/class/net/w*/operstate 2>/dev/null ; then
	grep -xq '0x1003' /sys/class/net/w*/flags && wifiicon="📡 " || wifiicon="❌ "
fi

printf "%s%s%s\n" "$wifiicon" "$(sed "s/down/❎/;s/up/🌐/" /sys/class/net/e*/operstate 2>/dev/null)" "$(sed "s/.*/🔒/" /sys/class/net/tun*/operstate 2>/dev/null)"

#+end_src

* Notification Sound
** Basic Script
#+begin_src sh :tangle ~/.config/dunst/notif.sh
#!/usr/bin/env sh

paplay "$HOME/.config/dunst/notif.ogg"
#+end_src

** Sound
#+begin_src python :tangle ~/.config/dunst/check.py
#!/usr/bin/env python3

import os

url = "https://github.com/DemonKingSwarn/dotfiles-3/raw/main/.config/dunst/notif.ogg"

if os.listdir()[0] == 'notif.ogg':
    print("notif.ogg is there!")
else:
    print("downloading notif.ogg...")
    os.system(f"wget {url}")

#+end_src
